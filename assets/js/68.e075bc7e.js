(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{421:function(t,v,_){"use strict";_.r(v);var p=_(4),n=Object(p.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("p",[_("strong",[t._v("进程")])]),t._v(" "),_("p",[t._v("我们都知道计算机的核心是CPU，它承担了所有的计算任务，而操作系统是计算机的管理者，它负责任务的调度，资源的分配和管理，统领整个计算机硬件；应用程序是具有某种功能的程序，程序是运行于操作系统之上的。")]),t._v(" "),_("p",[_("strong",[t._v("进程")]),t._v("是一个具有一定独立功能的程序在一个数据集上的一次动态执行的过程，是操作系统进行资源分配和调度的一个独立单位，是应用程序运行的载体。进程是一种抽象的概念，从来没有统一的标准定义。进程一般由程序，数据集合和进程控制块三部分组成。程序用于描述进程要完成的功能，是控制进程执行的指令集；数据集合是程序在执行时所需要的数据和工作区；程序控制块包含进程的描述信息和控制信息是进程存在的唯一标志。")]),t._v(" "),_("p",[t._v("进程具有的特征：")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("动态性：进程是程序的一次执行过程，是临时的，有生命期的，是动态产生，动态消亡的；")])]),t._v(" "),_("li",[_("p",[t._v("并发性：任何进程都可以同其他进行一起并发执行；")])]),t._v(" "),_("li",[_("p",[t._v("独立性：进程是系统进行资源分配和调度的一个独立单位；")])]),t._v(" "),_("li",[_("p",[t._v("结构性：进程由程序，数据和进程控制块三部分组成")])])]),t._v(" "),_("p",[_("strong",[t._v("线程")])]),t._v(" "),_("p",[t._v("在早期的操作系统中并没有线程的概念，进程是拥有资源和独立运行的最小单位，也是程序执行的最小单位。任务调度采用的是时间片轮转的抢占式调度方式，而进程是任务调度的最小单位，每个进程有各自独立的一块内存，使得各个进程之间内存地址相互隔离。")]),t._v(" "),_("p",[t._v("后来，随着计算机的发展，对CPU的要求越来越高，进程之间的切换开销较大，已经无法满足越来越复杂的程序的要求了。于是就发明了线程，线程是程序执行中一个单一的顺序控制流程，是程序执行流的最小单元，是处理器调度和分派的基本单位。一个进程可以有一个或多个线程，各个线程之间共享程序的内存空间(也就是所在进程的内存空间)。一个标准的线程由线程ID，当前指令指针PC，寄存器和堆栈组成。而进程由内存空间(代码，数据，进程空间，打开的文件)和一个或多个线程组成。")]),t._v(" "),_("p",[_("strong",[t._v("进程与线程的区别")])]),t._v(" "),_("ol",[_("li",[_("p",[t._v("线程是程序执行的最小单位，而进程是操作系统分配资源的最小单位；")])]),t._v(" "),_("li",[_("p",[t._v("一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线")])]),t._v(" "),_("li",[_("p",[t._v("进程之间相互独立，但同一进程下的各个线程之间共享程序的内存空间(包括代码段，数据集，堆等)及一些进程级的资源(如打开文件和信号等)，某进程内的线程在其他进程不可见；")])]),t._v(" "),_("li",[_("p",[t._v("调度和切换：线程上下文切换比进程上下文切换要快得多")])])]),t._v(" "),_("p",[_("strong",[t._v("线程和进程关系示意图")])]),t._v(" "),_("p",[_("img",{attrs:{src:"http://qn.huat.xyz/content/20200907212550.png",alt:""}})]),t._v(" "),_("p",[_("img",{attrs:{src:"http://qn.huat.xyz/content/20200907212606.png",alt:""}})]),t._v(" "),_("p",[t._v("总之，线程和进程都是一种抽象的概念，线程是一种比进程还小的抽象，线程和进程都可用于实现并发。在早期的操作系统中并没有线程的概念，进程是能拥有资源和独立运行的最小单位，也是程序执行的最小单位，它相当于一个进程里只有一个线程，进程本身就是线程。所以线程有时被称为轻量级进程")]),t._v(" "),_("p",[t._v("后来，随着计算机的发展，对多个任务之间上下文切换的效率要求越来越高，就抽象出一个更小的概念-线程，一般一个进程会有多个(也可以是一个)线程。")]),t._v(" "),_("p",[_("strong",[t._v("任务调度")])]),t._v(" "),_("p",[t._v("大部分操作系统的任务调度是采用时间片轮转的抢占式调度方式，也就是说一个任务执行一小段时间后强制暂停去执行下一个任务，每个任务轮流执行。任务执行的一小段时间叫做时间片，任务正在执行时的状态叫运行状态，任务执行一段时间后强制暂停去执行下一个任务，被暂停的任务就处于就绪状态，等待下一个属于它的时间片的到来。这样每个任务都能得到执行，由于CPU的执行效率非常高，时间片非常短，在各个任务之间快速地切换，给人的感觉就是多个任务在“同时进行”，这也就是我们所说的并发")]),t._v(" "),_("p",[_("img",{attrs:{src:"http://qn.huat.xyz/content/20200907212920.png",alt:""}})]),t._v(" "),_("p",[_("strong",[t._v("为何不使用多进程而是使用多线程？")])]),t._v(" "),_("p",[t._v("线程廉价，线程启动比较快，退出比较快，对系统资源的冲击也比较小。而且线程彼此分享了大部分核心对象(File Handle)的拥有权")]),t._v(" "),_("p",[t._v("如果使用多重进程，但是不可预期，且测试困难")]),t._v(" "),_("blockquote",[_("p",[t._v("参考 https://www.cnblogs.com/qianqiannian/p/7010909.html")])])])}),[],!1,null,null,null);v.default=n.exports}}]);