(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{425:function(o,e,v){"use strict";v.r(e);var t=v(4),_=Object(t.a)({},(function(){var o=this,e=o.$createElement,v=o._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":o.$parent.slotKey}},[v("h3",{attrs:{id:"简介"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[o._v("#")]),o._v(" 简介")]),o._v(" "),v("ul",[v("li",[o._v("Mongoose是一个让我们可以通过Node来操作 MongoDB的模块。")]),o._v(" "),v("li",[o._v("Mongoose是一个对象文档模型（ODM）库，它对 Node原生的MongoDB模块进行了进一步的优化封装， 并提供了更多的功能。")]),o._v(" "),v("li",[o._v("在大多数情况下，它被用来把结构化的模式应用到一个 MongoDB集合，并提供了验证和类型转换等好处")])]),o._v(" "),v("h3",{attrs:{id:"mongoose的好处"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mongoose的好处"}},[o._v("#")]),o._v(" mongoose的好处")]),o._v(" "),v("ul",[v("li",[o._v("可以为文档创建一个模式结构（Schema）")]),o._v(" "),v("li",[o._v("可以对模型中的对象/文档进行验证")]),o._v(" "),v("li",[o._v("数据可以通过类型转换转换为对象模型")]),o._v(" "),v("li",[o._v("可以使用中间件来应用业务逻辑挂钩")]),o._v(" "),v("li",[o._v("比Node原生的MongoDB驱动更容易")])]),o._v(" "),v("h3",{attrs:{id:"新的对象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#新的对象"}},[o._v("#")]),o._v(" 新的对象")]),o._v(" "),v("p",[v("strong",[o._v("mongoose中为我们提供了几个新的对象")])]),o._v(" "),v("ul",[v("li",[o._v("Schema对象定义约束了数据库中的文档结构")]),o._v(" "),v("li",[o._v("Model对象作为集合中的所有文档的表示，相当于 MongoDB数据库中的集合collection Document")]),o._v(" "),v("li",[o._v("Document表示集合中的具体文档，相当于集合中 的一个具体的文档")])]),o._v(" "),v("h3",{attrs:{id:"连接mongodb"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#连接mongodb"}},[o._v("#")]),o._v(" 连接MongoDB")]),o._v(" "),v("ul",[v("li",[v("p",[o._v("使用Mongoose必须先安装mongoose包")]),o._v(" "),v("ul",[v("li",[o._v("npm install mongoose")])])]),o._v(" "),v("li",[v("p",[o._v("加载Mongoose")]),o._v(" "),v("ul",[v("li",[o._v('const mongoose = require("mongoose")')])])]),o._v(" "),v("li",[v("p",[o._v("连接数据库")]),o._v(" "),v("ul",[v("li",[v("p",[o._v('mongoose.connect("mongodb://地址")')])]),o._v(" "),v("li",[v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[o._v("mongoose.connect('mongodb://localhost/mdb', { useMongoClient: true, useUnifiedTopology: true });\n")])])])])])]),o._v(" "),v("li",[v("p",[o._v("断开连接")]),o._v(" "),v("ul",[v("li",[o._v("mongoose.disconnect()")])])])]),o._v(" "),v("h3",{attrs:{id:"connection"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#connection"}},[o._v("#")]),o._v(" connection")]),o._v(" "),v("p",[o._v("一旦连接了MongoDB数据库，底层的 Connection对象就可以通过mongoose模块 的conection属性来访问。 connection对象是对数据库连接的抽象，它提供了对象连接、底层的Db对象和表示结合 的Model对象的访问。并且可以对connection对象上的一些事件进 行监听，来获悉数据库连接的开始与端开。比如，可以通过open和close事件来监控连接 的打开和关闭。")]),o._v(" "),v("h3",{attrs:{id:"schema模式对象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#schema模式对象"}},[o._v("#")]),o._v(" Schema模式对象")]),o._v(" "),v("p",[o._v("使用Mongoose必须经常定义模式。")]),o._v(" "),v("ul",[v("li",[o._v("模式为集合中的文档定义字段和字段类型。")]),o._v(" "),v("li",[o._v("如果你的数据是被结构化成支持模式的， 这是非常有用的。")]),o._v(" "),v("li",[o._v("简单来说，模式就是对文档的约束，有了模式，文档中的字段必须符合模式的规定。 否则将不能正常操作。")])]),o._v(" "),v("h3",{attrs:{id:"定义模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#定义模式"}},[o._v("#")]),o._v(" 定义模式")]),o._v(" "),v("ul",[v("li",[o._v("模式为集合中的文档定义字段和字段类型。")]),o._v(" "),v("li",[o._v("对于在模式中的每个字段，你都需要定一个特定的值类 型。受支持的类型如下： – String – Number – Boolean – Array – Buffer – Date – ObjectId或Oid – Mixed")]),o._v(" "),v("li",[o._v("需要为你计划使用的每个不同的文档类型都定义一个模式。")])]),o._v(" "),v("h3",{attrs:{id:"创建模式定义"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#创建模式定义"}},[o._v("#")]),o._v(" 创建模式定义")]),o._v(" "),v("ul",[v("li",[v("p",[o._v("模式需要通过mongoose的Schema属性来 创建，这个属性是一个构造函数。")]),o._v(" "),v("ul",[v("li",[o._v("new Schema(definition,option)")]),o._v(" "),v("li",[o._v("definition（描述模式）")]),o._v(" "),v("li",[o._v("options 配置对象，定义与数据库中集合的交互")])])]),o._v(" "),v("li",[v("p",[o._v("options常用选项")]),o._v(" "),v("ul",[v("li",[o._v("autoIndex – 布尔值，开启自动索引，默认true")]),o._v(" "),v("li",[o._v("bufferCommands – 布尔值，缓存由于连接问题无法执行的语句，默认true")]),o._v(" "),v("li",[o._v("capped – 集合中最大文档数量")]),o._v(" "),v("li",[o._v("collection – 指定应用Schema的集合名称")]),o._v(" "),v("li",[o._v("id – 布尔值，是否有应用于_id的id处理器，默认true")]),o._v(" "),v("li",[o._v("_id – 布尔值，是否自动分配id字段，默认true")]),o._v(" "),v("li",[o._v("strict – 布尔值，不符合Schema的对象不会被插入进数据库，默认true")])])])]),o._v(" "),v("h3",{attrs:{id:"model模型对象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#model模型对象"}},[o._v("#")]),o._v(" Model模型对象")]),o._v(" "),v("ul",[v("li",[v("p",[o._v("一旦定义好了Schema对象，就需要通过该 Schema对象来创建Model对象。")])]),o._v(" "),v("li",[v("p",[o._v("一旦创建好了Model对象，就会自动和数 据库中对应的集合建立连接，以确保在应 用更改时，集合已经创建并具有适当的索 引，且设置了必须性和唯一性。")])]),o._v(" "),v("li",[v("p",[o._v("Model对象就相当于数据库中的集合，通过Model可以完成对集合的CRUD操作。")])]),o._v(" "),v("li",[v("p",[o._v("创建模型对象需要使用mongoose的model() 方法，语法如下：")]),o._v(" "),v("ul",[v("li",[o._v("model(name, [schema], [collection] , [skipInit])")]),o._v(" "),v("li",[o._v("name参数相当于模型的名字，以后可以同过name找到模型。")]),o._v(" "),v("li",[o._v("schema是创建好的模式对象。")]),o._v(" "),v("li",[o._v("collection是要连接的集合名。")]),o._v(" "),v("li",[o._v("skipInit是否跳过初始化，默认是false。")])])]),o._v(" "),v("li",[v("p",[o._v("一旦把一个Schema对象编译成一个Model对 象，你就完全准备好开始在模型中访问、添加、 删除、更新和删除文档了。也就是说有了模型 以后我们就可以操作数据库了。")])])]),o._v(" "),v("h3",{attrs:{id:"model对象的方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#model对象的方法"}},[o._v("#")]),o._v(" Model对象的方法")]),o._v(" "),v("ul",[v("li",[o._v("remove(conditions, callback)")]),o._v(" "),v("li",[o._v("deleteOne(conditions, callback)")]),o._v(" "),v("li",[o._v("deleteMany(conditions, callback)")]),o._v(" "),v("li",[o._v("find(conditions, projection, options, callback)")]),o._v(" "),v("li",[o._v("findById(id, projection, options, callback)")]),o._v(" "),v("li",[o._v("findOne(conditions, projection, options, callback)")]),o._v(" "),v("li",[o._v("count(conditions, callback)")]),o._v(" "),v("li",[o._v("create(doc, callback)")]),o._v(" "),v("li",[o._v("update(conditions, doc, options, callback)")])]),o._v(" "),v("h3",{attrs:{id:"document文档对象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#document文档对象"}},[o._v("#")]),o._v(" Document文档对象")]),o._v(" "),v("ul",[v("li",[o._v("通过Model对数据库进行查询时，会返回 Document对象或Document对象数组。")]),o._v(" "),v("li",[o._v("Document继承自Model，代表一个集合 中的文档。")]),o._v(" "),v("li",[o._v("Document对象也可以和数据库进行交互 操作。")])]),o._v(" "),v("h3",{attrs:{id:"document对象的方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#document对象的方法"}},[o._v("#")]),o._v(" Document对象的方法")]),o._v(" "),v("ul",[v("li",[o._v("equals(doc)")]),o._v(" "),v("li",[o._v("id")]),o._v(" "),v("li",[o._v("get(path,[type])")]),o._v(" "),v("li",[o._v("set(path,value,[type])")]),o._v(" "),v("li",[o._v("update(update,[options],[callback])")]),o._v(" "),v("li",[o._v("save([callback]) • remove([callback])")]),o._v(" "),v("li",[o._v("isNew • isInit(path)")]),o._v(" "),v("li",[o._v("toJSON()")]),o._v(" "),v("li",[o._v("toObject()")])])])}),[],!1,null,null,null);e.default=_.exports}}]);